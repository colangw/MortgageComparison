shiny::runApp()
shiny::runApp()
chartA
plot(chartA)
shiny::runApp()
rPlot(current_principal ~ current_interest | month , data = dataA, type = "bar")
shiny::runApp()
dataA <- amort(100000, 5, 10)
dataA$current_interest[1] <- 0.0
dataA$current_principal[1] <- 0.0
for (idx in 2:nrow(dataA)) {
dataA$current_interest[idx] <- dataA$payment[idx] - dataA$principal[idx-1] + dataA$principal[idx]
dataA$current_principal[idx] <- dataA$payment[idx] - dataA$current_interest[idx]
}
View(dataA)
chartA <- rPlot(current_principal ~ current_interest | month , data = dataA, type = "bar")
chartA
chartA$addParams(dom = 'myChartA')
chartA$dom <- "myChartA"
chartA <- rPlot(current_principal ~ current_interest | month , data = dataA, type = "bar")
chartA$addParams(dom = "myChartA")
chartA$dom
chartA$addParams(width = 400)
chartA$addParams(height = 300)
chartA
shiny::runApp()
dataA <- amort(100000, 5, 10)
dat.chartA <- melt(dataA, id = 'month')
dat.chartA$value <- round(dat.chartA$value, 0)
## Setup
library("shiny")
library("rCharts")
#library("reshape2")
options("scipen" = 20)
pay <- function(principal, interest, duration, payfreq=1, firstpay=1, compoundfreq=1) {
r <- interest / (100 * 12 / compoundfreq )
if(firstpay > 1) {
principal <- principal * (1 + r)^((firstpay - 1) / compoundfreq)
duration <- duration - (firstpay - 1) / 12
}
payment <- principal * r / ( 1 - ( 1 + r)^(-duration * 12 / compoundfreq) ) * payfreq / compoundfreq
res <- list(r=r, payment=payment, principal=principal)
return(res)
}
## Amortization table
amort <- function(principal, interest, duration, payfreq=1, firstpay=1, compoundfreq=1) {
pay <- pay(principal, interest, duration)
data <- data.frame(month = seq(0, duration * 12))
data$payment <- 0
data$payment[ (data$month - firstpay) >= 0 & (data$month - firstpay) %% payfreq == 0 ] <- pay$payment
i <- which(data$payment != 0)
i <- i[length(i)]
data$payment[ i ] <- 0
data$payment[ i ] <- pay$payment * (duration - (firstpay - 1) / 12) * 12 / payfreq - sum(data$payment)
data$totalPayed <- cumsum(data$payment)
data$principal <- NA
data$principal[1] <- principal
idx <- (data$month - firstpay) >=0 & (data$month - firstpay) %% compoundfreq == 0
idx.pr <- which(idx)[-length(idx)] + compoundfreq - 1
if(any(idx.pr > max(data$month))) {
idx.pr <- idx.pr[-which(idx.pr > max(data$month))]
}
if(firstpay > 1) {
data$principal[firstpay] <- pay$principal
}
data$principal[ idx.pr ] <- (1 + pay$r)^seq_len(length(idx.pr)) * pay$principal - ( (1 + pay$r)^seq_len(length(idx.pr)) - 1 ) / pay$r * pay$payment * compoundfreq / payfreq
data$principal[ nrow(data)] <- 0
return(data)
}
dataA <- amort(100000, 5, 10)
dat.chartA <- melt(dataA, id = 'month')
dat.chartA$value <- round(dat.chartA$value, 0)
View(dataA)
View(dat.chartA)
dat.chartA$value <- round(dat.chartA$value, 0)
chartA <- nPlot(value ~ month, group = 'variable',
data = dat.chartA[complete.cases(dat.chartA), ],
type = 'lineWithFocusChart'
)
chartA$xAxis(axisLabel = 'Month')
chartA$addParams(dom = 'myChartA')
chartA
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
AB
paymentA <- amort(100000, 5, 10)
paymentB <- amort(100000, 5, 10)
pAB <- c(input$principalA, input$principalB)
paymentA <- pay(input$principalA, input$interestA, input$durationA)$payment
totalA <- paymentA * input$durationA * 12
paymentB <- pay(input$principalB, input$interestB, input$durationB)$payment
totalB <- paymentB * input$durationB * 12
iAB <- c(totalA - input$principalA, totalB - input$principalB)
AB <- rbind(iAB, pAB)
names(AB) <- c("Mortgage A", "Mortgage B")
AB
input$principalA <- 100000
input$principalB <- 100000
input$interestA <- 5
input$interestB <- 5
input$durationA <- 10
input$durationB <- 10
AB <- rbind(c(30000, 50000), c(60000, 90000))
View(AB)
names(AB) <- c("Mortgage A", "Mortgage B")
View(AB)
t
View(AB)
type(AB)
str(AB)
AB <- data.frame(rbind(c(30000, 50000), c(60000, 90000)))
View(AB)
str(AB)
names(AB) <- c("Mortgage A", "Mortgage B")
View(AB)
paysched <- amort(10000, 5, 5)
View(paysched)
AB <- data.frame(cbind(c(30000, 50000), c(60000, 90000)))
names(AB) <- c("Interest", "Principal")
View(AB)
AB <- data.frame(cbind(c(30000, 50000), c(60000, 90000)))
names(AB) <- c("Interest", "Principal")
roww.names(AB) <- c("Mortgage A", "Mortgage B")
AB <- data.frame(cbind(c(30000, 50000), c(60000, 90000)))
names(AB) <- c("Interest", "Principal")
row.names(AB) <- c("Mortgage A", "Mortgage B")
View(AB)
View(dataA)
View(AB)
AB <- data.frame(cbind(c(30000, 50000), c(60000, 90000)))
AB$Mortgage <- cbind("A", "B")
names(AB) <- c("Interest", "Principal")
AB <- data.frame(cbind(c(30000, 50000), c(60000, 90000)))
AB$Mortgage[1] <- "A"
AB$Mortgage[2] <- "B"
names(AB) <- c("Interest", "Principal")
View(AB)
AB <- data.frame(cbind(c(30000, 50000), c(60000, 90000)))
AB$Mortgage[1] <- "A"
AB$Mortgage[2] <- "B"
names(AB) <- c("Interest", "Principal", "Mortgage")
View(AB)
rPlot(Interest ~ Principal | Mortgage, color = Mortgage, type = 'bar')
rPlot(Interest ~ Principal | Mortgage, color = Mortgage, data = AB, type = 'bar')
rPlot(Interest ~ Principal | Mortgage, data = AB, type = 'bar')
p1 <- rPlot(Interest ~ Principal | Mortgage, data = AB, type = 'bar')
p1
library("shiny")
library("rCharts")
p1
shiny::runApp()
shiny::runApp()
renderChart(p1)
renderChart2(chartA)
renderChart()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
View(dat.chartA)
View(dat.chartA)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
View(dataA)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
View(dataA)
View(dat.chartA)
View(dataA)
dataA$current_interest[1] <- 0.0
dataA$current_principal[1] <- 0.0
for (idx in 2:nrow(dataA)) {
dataA$current_interest[idx] <- dataA$payment[idx] - dataA$principal[idx-1] + dataA$principal[idx]
dataA$current_principal[idx] <- dataA$payment[idx] - dataA$current_interest[idx]
}
View(dataA)
dat.chartA <- melt(dataA, id = 'month')
View(dat.chartA)
View(dat.chartA)
dat.chartA$value <- round(dat.chartA$value, 0)
View(dat.chartA)
shiny::runApp()
shiny::runApp()
View(dataA)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
dataA <- amort(100000, 5, 10)
View(dataA)
View(dataA)
View(dataA)
View(dataA)
names(dataA) <- ("Month", "Payment_A", "Total_Paid_A", "Principal_A")
names(dataA) <- c("Month", "Payment_A", "Total_Paid_A", "Principal_A")
View(dataA)
shiny::runApp()
View(dataA)
shiny::runApp()
shiny::runApp()
View(dataA)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
dataA <- amort(100000, 5, 10)
dataB <- amort(100000, 5, 10)
names(dataA) <- c("Month", "Payment_A", "Total_Paid_A", "Principal_A")
names(dataB) <- c("Month", "Payment_B", "Total_Paid_B", "Principal_B")
dataA$Current_Interest_A[1] <- 0.0
dataA$Current_Principal_A[1] <- 0.0
for (idx in 2:nrow(dataA)) {
dataA$Current_Interest_A[idx] <- dataA$Payment_A[idx] - dataA$Principal_A[idx-1] + dataA$Principal_A[idx]
dataA$Current_Principal_A[idx] <- dataA$Payment_A[idx] - dataA$Current_Interest_A[idx]
}
dataB$Current_Interest_B[1] <- 0.0
dataB$Current_Principal_B[1] <- 0.0
for (idx in 2:nrow(dataB)) {
dataB$Current_Interest_B[idx] <- dataB$Payment_B[idx] - dataB$Principal_B[idx-1] + dataB$Principal_B[idx]
dataB$Current_Principal_B[idx] <- dataB$Payment_B[idx] - dataB$Current_Interest_B[idx]
}
View(dataA)
View(dataB)
dataAB <- merge(dataA, dataB)
View(dataAB)
dat.chartAB <- melt(dataAB, id = 'Month')
View(dat.chartAB)
dat.chartAB$value <- round(dat.chartAB$value, 0)
View(dat.chartAB)
chartAB <- nPlot(value ~ Month, group = 'variable',
data = dat.chartAB[complete.cases(dat.chartAB), ],
type = 'multiBarChart')
chartAB
View(dataAB)
shiny::runApp()
shiny::runApp()
View(dataAB)
names(dataAB)
View(dat.chartAB)
View(dataAB)
View(dat.chartAB)
complete.cases(dat.chartAB)
shiny::runApp()
shiny::runApp()
dataA <- amort(100000, 5, 10)
dataB <- amort(100000, 5, 20)
names(dataA) <- c("Month", "Payment_A", "Total_Paid_A", "Principal_A")
names(dataB) <- c("Month", "Payment_B", "Total_Paid_B", "Principal_B")
dataA$Current_Interest_A[1] <- 0.0
dataA$Current_Principal_A[1] <- 0.0
for (idx in 2:nrow(dataA)) {
dataA$Current_Interest_A[idx] <- dataA$Payment_A[idx] - dataA$Principal_A[idx-1] + dataA$Principal_A[idx]
dataA$Current_Principal_A[idx] <- dataA$Payment_A[idx] - dataA$Current_Interest_A[idx]
}
dataB$Current_Interest_B[1] <- 0.0
dataB$Current_Principal_B[1] <- 0.0
for (idx in 2:nrow(dataB)) {
dataB$Current_Interest_B[idx] <- dataB$Payment_B[idx] - dataB$Principal_B[idx-1] + dataB$Principal_B[idx]
dataB$Current_Principal_B[idx] <- dataB$Payment_B[idx] - dataB$Current_Interest_B[idx]
}
dataAB <- merge(dataA, dataB)
View(dataAB)
shiny::runApp()
shiny::runApp()
shiny::runApp()
View(dataA)
names(dataA)
dataA <- amort(100000, 5, 10)
## Setup
library("shiny")
library("rCharts")
library("reshape2")
options("scipen" = 20)
pay <- function(Principal, interest, duration, payfreq=1, firstpay=1, compoundfreq=1) {
r <- interest / (100 * 12 / compoundfreq )
if(firstpay > 1) {
Principal <- Principal * (1 + r)^((firstpay - 1) / compoundfreq)
duration <- duration - (firstpay - 1) / 12
}
Payment <- Principal * r / ( 1 - ( 1 + r)^(-duration * 12 / compoundfreq) ) * payfreq / compoundfreq
res <- list(r=r,Payment=Payment, Principal=Principal)
return(res)
}
## Amortization table
amort <- function(Principal, interest, duration, payfreq=1, firstpay=1, compoundfreq=1) {
pay <- pay(Principal, interest, duration)
data <- data.frame(month = seq(0, duration * 12))
data$Payment <- 0
data$Payment[ (data$month - firstpay) >= 0 & (data$month - firstpay) %% payfreq == 0 ] <- pay$Payment
i <- which(data$Payment != 0)
i <- i[length(i)]
data$Payment[ i ] <- 0
data$Payment[ i ] <- pay$Payment * (duration - (firstpay - 1) / 12) * 12 / payfreq - sum(data$Payment)
data$Total_Paid <- cumsum(data$Payment)
data$Principal <- NA
data$Principal[1] <- Principal
idx <- (data$month - firstpay) >=0 & (data$month - firstpay) %% compoundfreq == 0
idx.pr <- which(idx)[-length(idx)] + compoundfreq - 1
if(any(idx.pr > max(data$month))) {
idx.pr <- idx.pr[-which(idx.pr > max(data$month))]
}
if(firstpay > 1) {
data$Principal[firstpay] <- pay$Principal
}
data$Principal[ idx.pr ] <- (1 + pay$r)^seq_len(length(idx.pr)) * pay$Principal - ( (1 + pay$r)^seq_len(length(idx.pr)) - 1 ) / pay$r * pay$Payment * compoundfreq / payfreq
data$Principal[ nrow(data)] <- 0
return(data)
}
dataA <- amort(100000, 5, 10)
dataB <- amort(100000, 5, 20)
names(dataA) <- c("Month", "Payment_A", "Total_Paid_A", "Principal_A")
names(dataB) <- c("Month", "Payment_B", "Total_Paid_B", "Principal_B")
dataA$Current_Interest_A[1] <- 0.0
dataA$Current_Principal_A[1] <- 0.0
for (idx in 2:nrow(dataA)) {
dataA$Current_Interest_A[idx] <- dataA$Payment_A[idx] - dataA$Principal_A[idx-1] + dataA$Principal_A[idx]
dataA$Current_Principal_A[idx] <- dataA$Payment_A[idx] - dataA$Current_Interest_A[idx]
}
dataB$Current_Interest_B[1] <- 0.0
dataB$Current_Principal_B[1] <- 0.0
for (idx in 2:nrow(dataB)) {
dataB$Current_Interest_B[idx] <- dataB$Payment_B[idx] - dataB$Principal_B[idx-1] + dataB$Principal_B[idx]
dataB$Current_Principal_B[idx] <- dataB$Payment_B[idx] - dataB$Current_Interest_B[idx]
}
if(nrow(dataB) < nrow(dataA)) {
for (idx in nrow(dataB)+1:nrow(dataA)){
dataA$Payment_B[idx] <- 0.0
dataA$Total_Paid_B[idx] <- 0.0
dataA$Principal_B[idx] <- 0.0
dataA$Current_Interest_B[idx] <- 0.0
dataA$Current_Principal_B[idx] <- 0.0
}
}
if(nrow(dataA) < nrow(dataB)) {
for (idx in nrow(dataA)+1:nrow(dataB)){
dataA$Payment_A[idx] <- 0.0
dataA$Total_Paid_A[idx] <- 0.0
dataA$Principal_A[idx] <- 0.0
dataA$Current_Interest_A[idx] <- 0.0
dataA$Current_Principal_A[idx] <- 0.0
}
}
nrow(dataA) < nrow(dataB)
if(nrow(dataA) < nrow(dataB)) {
for (idx in (nrow(dataA)+1):(nrow(dataB))){
dataA$Payment_A[idx] <- 0.0
dataA$Total_Paid_A[idx] <- 0.0
dataA$Principal_A[idx] <- 0.0
dataA$Current_Interest_A[idx] <- 0.0
dataA$Current_Principal_A[idx] <- 0.0
}
}
nrow(dataA)+1
nrow(dataB)
dataA$Payment_A[122] <- 0.0
nrow(dataA) < nrow(dataB)
for (idx in nrow(dataA)+1:nrow(dataB)){
dataA$[idx] <- 0.0
}
for (idx in nrow(dataA)+1:nrow(dataB)){
dataA$[idx] <- 0.0
}
if(nrow(dataA) < nrow(dataB)) {
for (idx in nrow(dataA)+1:nrow(dataB)){
dataA$[idx] <- 0.0
}
}
if(nrow(dataA) < nrow(dataB)) {
for (idx in (nrow(dataA)+1):(nrow(dataB))){
dataA$[idx] <- 0.0
}
}
if(nrow(dataA) < nrow(dataB)){
for (idx in (nrow(dataA)+1):(nrow(dataB))){
dataA$[idx] <- 0.0
}
}
if(nrow(dataA) < nrow(dataB)) {
for (idx in (nrow(dataA)+1):(nrow(dataB))){
dataA$[idx] <- 0.0
}
}
if(nrow(dataA) < nrow(dataB)) {
for (idx in (nrow(dataA)+1):(nrow(dataB))){
newrow <- c(idx, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
dataA$[idx] <- rbind(dataA, newrow)
}
}
newrow <- c(idx, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
nrow(dataA) < nrow(dataB)
lenA <- nrow(dataA)
lenB <- nrow(dataB)
for (idx in lenA+1:lenB){
newrow <- c(idx, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
dataA$[idx] <- rbind(dataA, newrow)
}
for (idx in (lenA+1):(lenB) {
newrow <- c(idx, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
dataA$[idx] <- rbind(dataA, newrow)
}
for (idx in (lenA+1):lenB) {
newrow <- c(idx, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
dataA$[idx] <- rbind(dataA, newrow)
}
if(nrow(dataA) < nrow(dataB)) {
lenA <- nrow(dataA)
lenB <- nrow(dataB)
for (idx in (lenA+1):lenB) {
newrow <- c(idx, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
dataA[idx] <- rbind(dataA, newrow)
}
}
View(dataA)
data[122] <- rbind(dataA, newrow)
data <- rbind(dataA, newrow)
dataA <- amort(100000, 5, 10)
dataB <- amort(100000, 5, 20)
names(dataA) <- c("Month", "Payment_A", "Total_Paid_A", "Principal_A")
names(dataB) <- c("Month", "Payment_B", "Total_Paid_B", "Principal_B")
dataA$Current_Interest_A[1] <- 0.0
dataA$Current_Principal_A[1] <- 0.0
for (idx in 2:nrow(dataA)) {
dataA$Current_Interest_A[idx] <- dataA$Payment_A[idx] - dataA$Principal_A[idx-1] + dataA$Principal_A[idx]
dataA$Current_Principal_A[idx] <- dataA$Payment_A[idx] - dataA$Current_Interest_A[idx]
}
dataB$Current_Interest_B[1] <- 0.0
dataB$Current_Principal_B[1] <- 0.0
for (idx in 2:nrow(dataB)) {
dataB$Current_Interest_B[idx] <- dataB$Payment_B[idx] - dataB$Principal_B[idx-1] + dataB$Principal_B[idx]
dataB$Current_Principal_B[idx] <- dataB$Payment_B[idx] - dataB$Current_Interest_B[idx]
}
if(nrow(dataA) < nrow(dataB)) {
lenA <- nrow(dataA)
lenB <- nrow(dataB)
for (idx in (lenA+1):lenB) {
newrow <- c(idx, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
dataA<- rbind(dataA, newrow)
}
}
View(dataA)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
setwd("C:/Users/werner/Dropbox/Programming/Coursera/DataScience_JH_specialization/9_Developing_Data_Products/devdataprod-011_Project")
